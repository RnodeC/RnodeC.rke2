---
### rke2_api_fqdn ###
- name: Default rke2_api_fqdn to the FQDN of the first host in the servers group if not provided
  set_fact:
    rke2_api_fqdn: "{{ hostvars[groups['servers'][0]]['ansible_fqdn'] }}"
  when: rke2_api_fqdn is not defined

- debug: var=rke2_api_fqdn
  when: debug | default(false) | bool

- name: Checking rke2_api_fqdn
  fail:
  when: rke2_api_fqdn is not defined

### rke2_node_ip ###
- name: Set rke2_node ip if rke2_node_iface is defined
  set_fact:
    rke2_node_ip: "{{ hostvars[inventory_hostname]['ansible_' + interface_name]['ipv4']['address'] }}"
  vars:
    interface_name: "{{ rke2_node_iface }}"
  when: rke2_node_iface is defined
- debug: msg="rke2_node_ip = {{ rke2_node_ip }}"
  when: rke2_node_iface is defined and debug | default(false) | bool

### rke2_token ###
- name: Check for the existence of /etc/rancher/rke2/config.yaml on the first host in the servers group
  ansible.builtin.stat:
    path: /etc/rancher/rke2/config.yaml
  register: rke2_config_file
  delegate_to: "{{ groups['servers'][0] }}"
  run_once: true

- block:
  - name: Read current config.yaml from first host in servers group
    ansible.builtin.slurp:
      src: /etc/rancher/rke2/config.yaml
    register: rke2_config_file_content

  - name: Read current config.yaml into yaml
    set_fact:
      rke2_config_yaml: "{{ rke2_config_file_content['content'] | b64decode | from_yaml }}"

  - name: Set rke2_token to existing token found in config.yaml
    set_fact:
      rke2_token: "{{ rke2_config_yaml['token'] }}"

  delegate_to: "{{ groups['servers'][0] }}"
  run_once: true
  when: rke2_config_file.stat.exists

- name: Generate a default shared token if rke2_token was not found nor provided
  set_fact:
    rke2_token: "{{ lookup('community.general.random_string', length=12, special=false) }}"
  delegate_to: "{{ groups['servers'][0] }}"
  run_once: true
  when: rke2_token is not defined

- debug: var=rke2_token 
  when: debug | default(false) | bool

- name: Set rke2_token for all hosts
  set_fact:
    rke2_token: "{{ hostvars[groups['all'][0]]['rke2_token'] }}"

### rke2_version ###
- block:
  - name: Get index of rke2 release channels
    ansible.builtin.uri: 
      url: https://update.rke2.io/v1-release/channels
    register: msg

  - name: Get latest version of the requested rke2_channel  
    set_fact:
      latest_rke2_version: "{{ msg.json.data | json_query(query) }}"
    vars: 
      query: "[? name==`{{ rke2_channel }}`].latest"

  - debug: >
      msg="Latest available version in rke2_channel {{ rke2_channel }} is: {{ latest_rke2_version[0] }}"

  - name: Set rk2_version if a specific version was not provided
    set_fact: 
      rke2_version: "{{ latest_rke2_version[0] }}"
    when: rke2_version is undefined

  - name: Set rk2_version_plain
    set_fact: 
      rke2_version_plain: "{{ rke2_version | replace('+', '') }}"

  - debug: >
      msg="We are installing: {{ rke2_version }}.  rke2_version_plain={{ rke2_version_plain }}"
